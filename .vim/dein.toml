# ファイルなどのあいまい検索
[[plugins]]
repo = 'junegunn/fzf'
build_on = '''
./install -all
'''
[[plugins]]
repo = 'junegunn/fzf.vim'

# ヘルプの日本語化
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# 置換のプレビュー
[[plugins]]
repo = 'markonm/traces.vim'

# Google翻訳
[[plugins]]
repo = 'skanehira/translate.vim'

## lint
#[[plugins]]
#repo = 'dense-analysis/ale'
#hook_add = '''
#let g:ale_linters = {
#\ 'cs': ['OmniSharp']
#\}
#'''

# file tree
[[plugins]]
repo = 'scrooloose/nerdtree'

# https://www.toumasu-program.net/entry/2019/01/28/105352
hook_add = '''
let g:NERDTreeWinSize = 20
augroup NERDTREE
  autocmd!
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
augroup END
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'


[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_setConceal = 0
'''

# [[plugins]]
# repo = 'Raimondi/delimitMate'
# hook_add = '''
# imap <CR> <Plug>delimitMateCR
# inoremap (<C-c> (<C-c>
# inoremap '<C-c> '<C-c>
# inoremap ''<C-c> ''<C-c>
# inoremap "<C-c> "<C-c>
# inoremap ""<C-c> ""<C-c>
# inoremap {<C-c> {<C-c>
# inoremap [<C-c> [<C-c>
# '''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
let g:neosnippet#snippets_directory='~/.vim/neosnippet/snippets/'
imap <expr> <TAB> pumvisible() ? "\<C-n>" : neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# finder/selector
[[plugins]]
repo = 'liuchengxu/vim-clap'
build = './install.sh'

# editorconfig
[[plugins]]
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
au FileType gitcommit let b:EditorConfig_disable = 1
'''

[[plugins]]
repo = 'tpope/vim-surround'

# binary editor
[[plugins]]
repo = 'Shougo/vinarise.vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
map  <Leader>F <Plug>(easymotion-bd-f)
nmap <Leader>F <Plug>(easymotion-overwin-f)

nmap s <Plug>(easymotion-overwin-f2)

map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

map  <Leader>W <Plug>(easymotion-bd-w)
nmap <Leader>W <Plug>(easymotion-overwin-w)
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
let g:rustfmt_autosave = 1
'''

# ref: いちからvimのrust開発環境を構築していく! (rust.vim, coc.nvim) https://zenn.dev/yuucu/articles/vimrc-rust-yuucu
# Nodejs extension host for vim & neovim, load extensions like VSCode and host language servers.
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> <F2> <Plug>(coc-rename)
nnoremap <silent> <F12> <Cmd>split<CR><Plug>(coc-definition)
vnoremap <silent> = <Plug>(coc-format-selected)

nmap <silent> <C-k><C-k> <Plug>(coc-codeaction-cursor)

if has('nvim')
  nnoremap <silent> <c-space> <Cmd>call CocActionAsync('doHover')<CR>
  inoremap <silent><expr> <c-space> coc#refresh()
else
  nnoremap <silent> <c-@> <Cmd>call CocActionAsync('doHover')<CR>
  inoremap <silent><expr> <c-@> coc#refresh()
endif

nnoremap <silent> <C-k><C-d> <Cmd> CocCommand editor.action.formatDocument<CR>

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Highlight the symbol and its references when holding the cursor
augroup dein_coc_hover
function! s:do_hover()
  call CocActionAsync('highlight')
endfunction
autocmd CursorHold * silent call s:do_hover()
augroup END

hi CocErrorHighlight ctermfg=red cterm=reverse term=underline
hi CocWarningHighlight ctermfg=darkyellow cterm=reverse term=underline
hi CocInfoHighlight ctermfg=blue cterm=reverse term=underline
hi CocHintHighlight cterm=underline term=underline

hi CocInlayHint ctermbg=236 ctermfg=250

hi CocFloating ctermbg=23
"hi CocWarningVirtualText ctermfg=130
hi CocWarningFloat ctermfg=3 ctermbg=8

"hi myCsKeyword ctermfg=81
"hi myCsComment ctermfg=108
"hi myCsCharStr ctermfg=174
"hi csRepeat ctermfg=219
"hi csInteger ctermfg=223

"hi link csBoolean myCsKeyword
"hi link csConditional myCsKeyword
"hi link csModifier myCsKeyword
"hi link csNew myCsKeyword
"hi link csType myCsKeyword
"  hi link csStorage csType
"hi link csUnspecifiedStatement myCsKeyword
"hi link csUnsupportedStatement myCsKeyword
"hi link csAccess myCsKeyword
"hi link csLineComment myCsComment
"hi link csBlockComment myCsComment
"
"hi link csCharacter myCsCharStr
"hi link csString myCsCharStr
"
"hi link csOpSymbols Normal
"hi link csLogicSymbols Normal
'''

#[[plugins]]
#repo = 'utubo/jumpcursor.vim'
#hook_add = '''
#nmap <CR> <Plug>(jumpcursor-jump)
#nnoremap <C-c> <Cmd>call jumpcursor#clear()<CR>
#'''

#[[plugins]]
#repo = 'OmniSharp/omnisharp-vim'
#on_ft = ['cs', 'xml']
#hook_add = '''
#let g:OmniSharp_server_use_net6 = 1
#let g:OmniSharp_server_type = 'roslyn'
#
#augroup Keybind_OmniSharp
#  function! s:set_omnisharp_keybind()
#    nnoremap <buffer> <F2> <Cmd>OmniSharpRename<CR>
#    nnoremap <buffer> <F12> <Cmd>OmniSharpGotoDefinition<CR>
#    nnoremap <buffer> <C-F12> <Cmd>OmniSharpFindUsages<CR>
#    inoremap <buffer> <C-K><C-K> <Cmd>OmniSharpGetCodeActions<CR>
#    nnoremap <buffer> <C-K><C-K> <Cmd>OmniSharpGetCodeActions<CR>
#    inoremap <buffer> <C-K><C-D> <Cmd>OmniSharpCodeFormat<CR>
#    nnoremap <buffer> <C-K><C-D> <Cmd>OmniSharpCodeFormat<CR>
#    inoremap <buffer> <C-K><C-I> <Cmd>OmniSharpDocumentation<CR>
#    nnoremap <buffer> <C-K><C-I> <Cmd>OmniSharpDocumentation<CR>
#    inoremap <buffer> <C-K><C-J> <Cmd>OmniSharpSignatureHelp<CR>
#    nnoremap <buffer> <C-K><C-J> <Cmd>OmniSharpSignatureHelp<CR>
#    inoremap <buffer> <Nul> <C-x><C-o>
#    nnoremap <buffer> <C-L> <Cmd>OmniSharpGetCodeActions<CR>
#    inoremap <buffer> <C-L> <Cmd>OmniSharpGetCodeActions<CR>
#    nnoremap <buffer> gd <Cmd>OmniSharpGotoDefinition<CR>
#  endfunction
#  autocmd!
#  autocmd FileType cs,xml call s:set_omnisharp_keybind()
#  autocmd InsertLeave cs <buffer> OmniSharpCodeFormat
#augroup END
#let g:OmniSharp_selector_ui = 'clap'
#let g:OmniSharp_highlight_groups = {
#\ 'ExtensionMethodName': 'vsExtensionMethodName',
#\ 'MethodName': 'vsMethodName',
#\ 'ParameterName': 'vsParameterName',
#\ 'TypeParameterName': 'vsTypeParameterName',
#\ 'PropertyName': 'vsPropertyName',
#\ 'FieldName': 'vsFieldName',
#\ 'LocalName': 'vsLocalName',
#\ 'ConstantName': 'vsConstant',
#\ 'InterfaceName': 'vsInterfaceName',
#\ 'ClassName': 'vsClassName',
#\ 'StructName': 'vsStructName',
#\ 'OperatorOverloaded': 'vsOperatorOverloaded',
#\ 'ControlKeyword': 'vsControlKeyword',
#\ 'Keyword': 'vsKeyword',
#\ 'StringLiteral': 'vsString',
#\ 'PreprocessorKeyword': 'vsPreprocessor',
#\ 'ExcludedCode': 'vsExcluded',
#\}
#hi Operator ctermfg=250
#hi link vsOperatorOverloaded Operator
#hi vsMethodName ctermfg=230
#hi link vsExtensionMethodName vsMethodName
#hi vsTypeParameterName ctermfg=193
#hi vsParameterName ctermfg=222
#hi vsLocalName ctermfg=252
#hi vsOperaterOverloaded ctermfg=7
#hi vsControlKeyword ctermfg=219
#hi vsKeyword ctermfg=153
#hi vsPropertyName ctermfg=254
#hi vsFieldName ctermfg=254
#hi vsConstant ctermfg=251
#hi vsInterfaceName ctermfg=122
#hi vsClassName ctermfg=79
#hi vsStructName ctermfg=113
#hi vsString ctermfg=216
#hi vsPreprocessor ctermfg=245
#hi link vsExcluded vsPreprocessor
#hi Identifier ctermfg=lightgray
#hi Comment ctermfg=darkgray
#hi link csType vsKeyword
#hi link csModifier vsKeyword
#hi link csAsync vsKeyword
#hi link csConstant vsConstant
#hi link csNumber vsConstant
#hi link csString vsString
#hi link csCharacter vsString
#hi link StringLiteral vsString
#'''

[[plugins]]
repo = 'gorodinskiy/vim-coloresque'
on_ft = ['css', 'html', 'less', 'sass', 'scss', 'stylus', 'vim']

